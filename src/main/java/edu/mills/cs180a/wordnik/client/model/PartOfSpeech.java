/*
 * api.wordnik.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package edu.mills.cs180a.wordnik.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * PartOfSpeech
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-04-10T17:59:52.032-07:00")
public class PartOfSpeech {
  @JsonProperty("allCategories")
  private List<Object> allCategories = null;

  @JsonProperty("roots")
  private List<Object> roots = null;

  @JsonProperty("storageAbbr")
  private List<String> storageAbbr = null;

  public PartOfSpeech allCategories(List<Object> allCategories) {
    this.allCategories = allCategories;
    return this;
  }

  public PartOfSpeech addAllCategoriesItem(Object allCategoriesItem) {
    if (this.allCategories == null) {
      this.allCategories = new ArrayList<Object>();
    }
    this.allCategories.add(allCategoriesItem);
    return this;
  }

   /**
   * Get allCategories
   * @return allCategories
  **/
  @ApiModelProperty(value = "")
  public List<Object> getAllCategories() {
    return allCategories;
  }

  public void setAllCategories(List<Object> allCategories) {
    this.allCategories = allCategories;
  }

  public PartOfSpeech roots(List<Object> roots) {
    this.roots = roots;
    return this;
  }

  public PartOfSpeech addRootsItem(Object rootsItem) {
    if (this.roots == null) {
      this.roots = new ArrayList<Object>();
    }
    this.roots.add(rootsItem);
    return this;
  }

   /**
   * Get roots
   * @return roots
  **/
  @ApiModelProperty(value = "")
  public List<Object> getRoots() {
    return roots;
  }

  public void setRoots(List<Object> roots) {
    this.roots = roots;
  }

  public PartOfSpeech storageAbbr(List<String> storageAbbr) {
    this.storageAbbr = storageAbbr;
    return this;
  }

  public PartOfSpeech addStorageAbbrItem(String storageAbbrItem) {
    if (this.storageAbbr == null) {
      this.storageAbbr = new ArrayList<String>();
    }
    this.storageAbbr.add(storageAbbrItem);
    return this;
  }

   /**
   * Get storageAbbr
   * @return storageAbbr
  **/
  @ApiModelProperty(value = "")
  public List<String> getStorageAbbr() {
    return storageAbbr;
  }

  public void setStorageAbbr(List<String> storageAbbr) {
    this.storageAbbr = storageAbbr;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartOfSpeech partOfSpeech = (PartOfSpeech) o;
    return Objects.equals(this.allCategories, partOfSpeech.allCategories) &&
        Objects.equals(this.roots, partOfSpeech.roots) &&
        Objects.equals(this.storageAbbr, partOfSpeech.storageAbbr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allCategories, roots, storageAbbr);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartOfSpeech {\n");
    
    sb.append("    allCategories: ").append(toIndentedString(allCategories)).append("\n");
    sb.append("    roots: ").append(toIndentedString(roots)).append("\n");
    sb.append("    storageAbbr: ").append(toIndentedString(storageAbbr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

